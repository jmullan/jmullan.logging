[build-system]
requires = [
    "hatchling"
]
build-backend = "hatchling.build"

[project]
name = "jmullan.logging"
version = "1.0.0"
description = "Easily set up logging for your python script"
authors = [
    {name = "Jesse Mullan", email="jmullan@gmail.com"},
    {name = "Hope Ranker", email="hope.ranker@gmail.com"}
]
maintainers = [
    {name = "Jesse Mullan", email="jmullan@gmail.com"}
]
classifiers = [
    "Topic :: Software Development",
    "Intended Audience :: Developers"
]
readme = "README.md"
requires-python = ">=3.13"
keywords = ["logging"]
dependencies = [
    'colorist'
]

[project.optional-dependencies]
all = ["jmullan.logging[test,dev,build]"]
test = [
    "coverage[toml]",
    "pytest",
    "pytest-cov",
    "pytest-mock",
]
dev = [
    "mdformat",
    "mypy",
    "pre-commit",
    "ruff"
]
build = [
    "hatch",
    "pip",
    "uv"
]

[project.urls]
homepage = "https://github.com/jmullan/jmullan.logging"
documentation = "https://github.com/jmullan/jmullan.logging"
repository = "https://github.com/jmullan/jmullan.logging"

[tool.hatch.build.targets.wheel]
packages = ["src/jmullan"]

[tool.hatch.metadata]
allow-direct-references = true
allow-implicit-namespace-packages = true

[tool.hatch.envs.types]
extra-dependencies = [
  "mypy>=1.0.0",
]

[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/jmullan/logging tests}"


[tool.coverage.run]
source_pkgs = ["jmullan.logging", "tests"]
branch = true
parallel = true
omit = [
  "src/jmullan/logging/__about__.py",
]

[tool.coverage.paths]
jmullan.logging = ["src/jmullan/logging"]
tests = ["tests", "*/jmullan/logging/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.mypy]
namespace_packages = true
explicit_package_bases = true
mypy_path = "src:tests"
ignore_missing_imports = true
enable_error_code = [
    "ignore-without-code"
]

[tool.ruff]
line-length = 120
lint.select = [
    "ALL"
]
lint.ignore = [
    "ANN002",  # Missing type annotation for `*args`
    "ANN003",  # Missing type annotation for `**kwargs`
    "ANN204", # Missing return type annotation for special method `__init__`
    "BLE001",  # Do not catch blind exception: `Exception`
    "COM812",  # missing-trailing-comma
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in `__init__`
    "D203",  # `incorrect-blank-line-before-class`
    "D213",  # `multi-line-summary-second-line`
    "EM101",  # Exception must not use a string literal, assign to variable first
    "SIM108",  # Use ternary operator instead of `if`-`else`-block
    "TRY003",  # Avoid specifying long messages outside the exception class
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ANN",     # Missing type annotations
    "ARG",     # Unused function args -> fixtures nevertheless are functionally relevant...
    "D",       # Missing docstrings
    "D103",    # Missing docstring in public function
    "FBT",     # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "PLR2004", # Magic value used in comparison, ...
    "S101",    # asserts allowed in tests...
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "TRY002",  # Create your own exception
    "TRY301",  # Abstract `raise` to an inner function
]

[tool.ruff.lint.isort]
known-first-party = ["jmullan.logging"]
known-local-folder = ["src"]
section-order = ["future", "standard-library", "third-party", "internal", "first-party", "local-folder"]

[tool.ruff.lint.flake8-annotations]
# this is supposed to deal with ANN204 for __init__, but doesn't seem to work
mypy-init-return = true

[tool.ruff.lint.isort.sections]
internal = ["jmullan"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 80
quote-style = "double"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--doctest-modules -p no:logging --import-mode=importlib"
consider_namespace_packages = true
